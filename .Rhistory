library(dplyr)
M.Data <- DATA %>%
gather( Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
library(tidyverse)
M.Data <- DATA %>%
gather( Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
M.Data$value %<>% as.numeric
M.Data %<>% spread(value = value , key = Attributes)
Exclude <- which(colnames(M.Data) %in% c("Ward", 'Total') )
M.Data[,-c(Exclude)] <-   M.Data[,-Exclude] * 100 / M.Data$Total
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
library(stringr)
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
Stats <- M.Data %>% select(-Ward) %>%
filter(!is.na(SCODE_NAME))
Stats
DATA$Toronto %<>% as.numeric
#Melt the data and make Wards as rows and data as columns
M.Data <- DATA %>%
gather( Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
head(M.Data)
M.Data$value %<>% as.numeric
M.Data %<>% spread(value = value , key = Attributes)
head(M.Data)
Exclude <- which(colnames(M.Data) %in% c("Ward", 'Total') )
head(Exclude)
M.Data[,-c(Exclude)] <-   M.Data[,-Exclude] * 100 / M.Data$Total
head(M.Data)
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
head(M.Data)
Stats <- M.Data %>% select(-Ward) %>%
filter(!is.na(SCODE_NAME))
Stats
transform_data <- function(DATA){
DATA$Toronto %<>% as.numeric
#Melt the data and make Wards as rows and data as columns
M.Data <- DATA %>%
gather( Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
M.Data$value %<>% as.numeric
M.Data %<>% spread(value = value , key = Attributes)
#.- Subset data to put in the map
Exclude <- which(colnames(M.Data) %in% c("Ward", 'Total') )
M.Data[,-c(Exclude)] <-   M.Data[,-Exclude] * 100 / M.Data$Total
#Get the code name out of the Ward variable
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
Stats <- M.Data %>% select(-Ward) %>%
filter(!is.na(SCODE_NAME))
}
Data_organized <- lmap(Data_divided, transform_data)
transform_data(Data_divided[[2]])
Stats
Data_organized <- lmap(Data_divided, transform_data)
transform_data(Data_divided[[2]])
Data_divided[[2]]
DATA$Toronto %<>% as.numeric
#Melt the data and make Wards as rows and data as columns
M.Data <- DATA %>%
gather( Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
M.Data$value %<>% as.numeric
M.Data %<>% spread(value = value , key = Attributes)
#.- Subset data to put in the map
Exclude <- which(colnames(M.Data) %in% c("Ward", 'Total') )
M.Data[,-c(Exclude)] <-   M.Data[,-Exclude] * 100 / M.Data$Total
#Get the code name out of the Ward variable
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
Stats <- M.Data %>% select(-Ward) %>%
filter(!is.na(SCODE_NAME))
Stats
transform_data(DATA)
transform_data <- function(DATA){
DATA$Toronto %<>% as.numeric
#Melt the data and make Wards as rows and data as columns
M.Data <- DATA %>%
gather( Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
M.Data$value %<>% as.numeric
M.Data %<>% spread(value = value , key = Attributes)
#.- Subset data to put in the map
Exclude <- which(colnames(M.Data) %in% c("Ward", 'Total') )
M.Data[,-c(Exclude)] <-   M.Data[,-Exclude] * 100 / M.Data$Total
#Get the code name out of the Ward variable
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
Stats <- M.Data %>% select(-Ward) %>%
filter(!is.na(SCODE_NAME))
Stats
}
transform_data(DATA)
transform_data(Data_divided[[3]])
transform_data(Data_divided[[4]])
Data_organized <- lmap(Data_divided, transform_data)
DATA
Data_divided[[4]]
data.frame(Data_divided[[4]])
transform_data <- function(DATA){
DATA$Toronto %<>% as.numeric
DATA %<>% (!is.na(Toronto))
#Melt the data and make Wards as rows and data as columns
M.Data <- DATA %>%
gather( Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
M.Data$value %<>% as.numeric
M.Data %<>% spread(value = value , key = Attributes)
#.- Subset data to put in the map
Exclude <- which(colnames(M.Data) %in% c("Ward", 'Total') )
M.Data[,-c(Exclude)] <-   M.Data[,-Exclude] * 100 / M.Data$Total
#Get the code name out of the Ward variable
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
Stats <- M.Data %>% select(-Ward) %>%
filter(!is.na(SCODE_NAME))
Stats
}
transform_data(Data_divided[[4]])
head(Data_divided[[4]])
DATA <- Data_divided[[4]]
DATA
DATA$Toronto %<>% as.numeric
DATA %<>% (!is.na(Toronto))
transform_data <- function(DATA){
DATA$Toronto %<>% as.numeric
DATA %<>% filter(!is.na(Toronto))
#Melt the data and make Wards as rows and data as columns
M.Data <- DATA %>%
gather( Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
M.Data$value %<>% as.numeric
M.Data %<>% spread(value = value , key = Attributes)
#.- Subset data to put in the map
Exclude <- which(colnames(M.Data) %in% c("Ward", 'Total') )
M.Data[,-c(Exclude)] <-   M.Data[,-Exclude] * 100 / M.Data$Total
#Get the code name out of the Ward variable
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
Stats <- M.Data %>% select(-Ward) %>%
filter(!is.na(SCODE_NAME))
Stats
}
Data_organized <- lmap(Data_divided, transform_data)
DATA$Toronto %<>% as.numeric
DATA %<>% filter(!is.na(Toronto))
DATA
transform_data(Data_divided[[4]])
transform_data(Data_divided[[5]])
transform_data(Data_divided[[6]])
transform_data <- function(DATA){
DATA %<>% filter(!is.na(Toronto))
DATA$Toronto %<>% as.numeric
#Melt the data and make Wards as rows and data as columns
M.Data <- DATA %>%
gather( Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
M.Data$value %<>% as.numeric
M.Data %<>% spread(value = value , key = Attributes)
#.- Subset data to put in the map
Exclude <- which(colnames(M.Data) %in% c("Ward", 'Total') )
M.Data[,-c(Exclude)] <-   M.Data[,-Exclude] * 100 / M.Data$Total
#Get the code name out of the Ward variable
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
Stats <- M.Data %>% select(-Ward) %>%
filter(!is.na(SCODE_NAME))
Stats
}
transform_data(Data_divided[[6]])
transform_data(Data_divided[[7]])
transform_data(Data_divided[[8]])
transform_data(Data_divided[[9]])
Data_organized <- lmap(Data_divided, transform_data)
lmap(Data_divided,nrow)
lmap(Data_divided,ncol)
maybe_rep <- function(x) {
n <- rpois(1, 2)
out <- rep_len(x, n)
if (length(out) > 0) {
names(out) <- paste0(names(x), seq_len(n))
}
out
}
# The output size varies each time we map f()
x <- list(a = 1:4, b = letters[5:7], c = 8:9, d = letters[10])
x %>% lmap(maybe_rep)
# We can apply f() on a selected sub
x
Data_organized <- lapply(Data_divided, transform_data)
head(Data_organized)
names(Data_organized)
saveRDS(Stats, 'Map Toronto/Data_organized.RDS')
saveRDS(Data_organized, 'Map Toronto/Data_organized.RDS')
head(Map_draw)
Map_draw <- readRDS('../Map_draw.RDS')
readRDS
readRDS('Map Toronto/Map_draw.RDS')
readRDS('Map Toronto/Map_draw.RDS') %>% head
#3.-Deal with the statistical data
DATA <- read_excel('Map Toronto/Ward Profiles - Census_2011.xlsx',
range = 'A11:AX642')
#Take a look at the rows
head(DATA)
colnames(DATA)[1] <- 'Attributes'
M.Data <- gather(DATA, Ward, value, -Attributes) %>%
filter(!is.na(value), !is.na(Attributes))
M.Data$value %<>% as.numeric
#Get the code name out of the Ward variable
M.Data$SCODE_NAME <- str_extract(string = M.Data$Ward, '[0-9]+') %>%
as.numeric
head(M.Data)
Map <- readRDS('Map Toronto/Ward 2/Map.RDS')
Map$SCODE_NAME %<>% as.character  %>% as.numeric
Map@data %<>% left_join(Data_organized[[1]])
head(Map)
head(Map@data)
Map %<>% spTransform(CRS("+proj=longlat +datum=WGS84"))
Map_draw <- fortify(Map, region ='SCODE_NAME')
Map_draw$id %<>% as.numeric
Data <- Map@data
#Add the stats to the map data
Map_draw %<>% left_join( Data,
by = c('id'='SCODE_NAME'))
Map <- readRDS('Map Toronto/Ward 2/Map.RDS')
#Join
Map$SCODE_NAME %<>% as.character  %>% as.numeric
Map@data %<>% left_join(Data_organized[[1]])
#Transform polygon data into a data.frame
Map %<>% spTransform(CRS("+proj=longlat +datum=WGS84"))
Map_draw <- fortify(Map, region ='SCODE_NAME')
Map_draw$id %<>% as.numeric
Data <- Map@data
#Add the stats to the map data
Map_draw %<>% left_join( Data,
by = c('id'='SCODE_NAME'))
Toronto <- readRDS('Map Toronto/Toronto.RDS')
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
#Plot the map
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Multiple responses`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
library(ggmpa)
library(ggmap)
Toronto <- readRDS('Map Toronto/Toronto.RDS')
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
#Plot the map
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Multiple responses`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
#Aggregate data to get mean latitude and mean longitude for each state
cnames <- aggregate(cbind(long, lat) ~ NAME, data=Map_draw,
FUN=function(x) mean(range(x)))
cnames$New_Name <- gsub(pattern = " *\\(.*?\\) *",
x = cnames$NAME, replacement = '')
cnames$New_Name <- gsub(pattern = "-",
x = cnames$New_Name, replacement = '\n')
cnames$New_Name <- gsub(pattern = ' ',
x = cnames$New_Name, replacement = '\n')
saveRDS(cnames, 'Map Toronto/cnames.RDS')
#Download the map from goggle maps
# Toronto <- get_map(location = c(-79.43, 43.725), zoom=10)
#saveRDS(Toronto, 'Map Toronto/Toronto.RDS')
Toronto <- readRDS('Map Toronto/Toronto.RDS')
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
#Plot the map
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Multiple responses`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Owner`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Renter`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
cnames <- readRDS('Map Toronto/cnames.RDS')
Map@data %<>% left_join(Data_organized[[2]]) #Join with what you are interested
Map %<>% spTransform(CRS("+proj=longlat +datum=WGS84"))
Map_draw <- fortify(Map, region ='SCODE_NAME')
Map_draw$id %<>% as.numeric
Data <- Map@data
Map_draw %<>% left_join( Data,
by = c('id'='SCODE_NAME'))
saveRDS(Map_draw, 'Map Toronto/Map_draw.RDS')
cnames <- readRDS('Map Toronto/cnames.RDS')
Toronto <- readRDS('Map Toronto/Toronto.RDS')
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Renter`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
Map_draw %>% head
Map <- readRDS('Map Toronto/Ward 2/Map.RDS')
Map$SCODE_NAME %<>% as.character  %>% as.numeric
for(i in 1:length(Data_organized)){
Map@data %>% left_join(Data_organized[[i]])
}
Map %<>% spTransform(CRS("+proj=longlat +datum=WGS84"))
Map_draw <- fortify(Map, region ='SCODE_NAME')
Map_draw$id %<>% as.numeric
Data <- Map@data
Map_draw %<>% left_join( Data,
by = c('id'='SCODE_NAME'))
saveRDS(Map_draw, 'Map Toronto/Map_draw.RDS')
#Get cnames
cnames <- readRDS('Map Toronto/cnames.RDS')
#6.- Plot the data
#Download the map from goggle maps
# Toronto <- get_map(location = c(-79.43, 43.725), zoom=10)
#saveRDS(Toronto, 'Map Toronto/Toronto.RDS')
Toronto <- readRDS('Map Toronto/Toronto.RDS')
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
#Plot the map
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Renter`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
head(Map_draw)
for(i in 1:length(Data_organized)){
Map@data %<>% left_join(Data_organized[[i]], by = 'SCODE_NAME')
}
head(Map@data)
dim(Map@data)
#Transform polygon data into a data.frame
Map %<>% spTransform(CRS("+proj=longlat +datum=WGS84"))
Map_draw <- fortify(Map, region ='SCODE_NAME')
Map_draw$id %<>% as.numeric
Data <- Map@data
#Add the stats to the map data
Map_draw %<>% left_join( Data,
by = c('id'='SCODE_NAME'))
saveRDS(Map_draw, 'Map Toronto/Map_draw.RDS')
#Get cnames
cnames <- readRDS('Map Toronto/cnames.RDS')
#6.- Plot the data
#Download the map from goggle maps
# Toronto <- get_map(location = c(-79.43, 43.725), zoom=10)
#saveRDS(Toronto, 'Map Toronto/Toronto.RDS')
Toronto <- readRDS('Map Toronto/Toronto.RDS')
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
#Plot the map
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Renter`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Owner`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `Owner`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
colnames(Map_draw)
ggmap(Toronto, extent = 'normal') +
geom_polygon(data = Map_draw,
aes(long, lat, group = group,fill = `$100,000 and over`),
colour = 'gray', alpha =.7) +
geom_text(data =cnames, aes(long, lat, label = New_Name),
size =3, check_overlap = TRUE) +
coord_map() +
scale_fill_gradient(low = 'white', high = 'dark blue') +
xlim(c(-79.65,-79.10)) + ylim(c(43.55,43.88)) +
labs(fill=' ') +
ditch_the_axes
shiny::runApp('Map Toronto/Toronto_languages')
runApp('Map Toronto/Toronto_languages')
setwd("~/XPLORER/")
source("~/XPLORER/INDICADORES/src/0_READ_HISTORICAL_PRICES.R")
cat("Checking for new stocks in the portfolio \n \n")
#source("~/XPLORER/INDICADORES/src/1_UPDATE_STOCKS.R")
source("~/XPLORER/INDICADORES/src/1_UPDATE_STOCKS_google.R")
cat("Creating the report \n \n")
source("~/XPLORER/INDICADORES/src/2_Stock_process.R")
cat("\n \n \n ============================== \n")
cat("       Report ready \n")
cat(" ============================== \n \n")
Sys.sleep(3)
# Update the stock report
setwd("~/XPLORER/")
source("~/XPLORER/INDICADORES/src/0_READ_HISTORICAL_PRICES.R")
cat("Checking for new stocks in the portfolio \n \n")
#source("~/XPLORER/INDICADORES/src/1_UPDATE_STOCKS.R")
source("~/XPLORER/INDICADORES/src/1_UPDATE_STOCKS_google.R")
cat("Creating the report \n \n")
source("~/XPLORER/INDICADORES/src/2_Stock_process.R")
cat("\n \n \n ============================== \n")
cat("       Report ready \n")
cat(" ============================== \n \n")
Sys.sleep(3)
